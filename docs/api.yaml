openapi: 3.0.0
info:
  title: Example node server with express framework API
  description: An example CRUD API
  version: 1.0.0
servers:
  - url: http://localhost:3000/api
paths:
  /users:
    get:
      summary: Returns a list of all users
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Creates a new user
      requestBody:
        description: User object that needs to be added to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Returns a specific user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A single user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Updates an existing user
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: User object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Deletes a user
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
components:
  schemas:
    NewUser:
      type: object
      properties:
        name:
          type: string
          example: Alice Mondragon
        email:
          type: string
          format: email
          example: name@example.com
    UpdateUser:
      type: object
      properties:
        name:
          type: string
          example: Alice Mondragon
        email:
          type: string
          format: email
          example: name@example.com
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Alice Mondragon
        email:
          type: string
          format: email
          example: name@example.com
